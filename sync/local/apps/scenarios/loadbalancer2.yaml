# do not change this
root:

  # the name of the scenario
  name: "loadbalancer2"

  # a short description that can be printed to console
  description: "Use static rules to distribute the traffic evenly based on your knowledge of traffic from ip subnets."

  # link to a pdf with a more detailed description (if available)
  pdf: "./loadbalancer2.pdf"

  # working directory for this scenario
  working_directory: "cwd/loadbalancer2"

  # specify the topology of the scenario
  topology:

    # the switches of the topology
    switches:
      - name: s1
        dpid: 1
        enabled: True

    hosts:
      - name: h1
        ip: "11.0.0.1/8"
      - name: h2
        ip: "22.0.0.1/8"
      - name: h3
        ip: "33.0.0.1/8"

    links:
      - [h1, s1, 1000]
      - [h2, s1, 1000]
      - [h3, s1, 1000]

  networks:
    - name: "h1"
      alias: "H1"
      send_from_src:
        - "11.0.0.1/8"
      send_to_dst:
        - "22.0.0.0/8"
    - name: "h2"
      alias: "H2"
      packet_ratio: 0.62
      recv_to_dst:
        - "22.0.0.0/8"
        - "44.0.0.0/8"
    - name: "h3"
      alias: "H3"
      packet_ratio: 0.76
      recv_to_dst:
        - "33.0.0.0/8"
        - "44.0.0.0/8"

  # traffic generation
  traffic:
    # specify all the profiles that should be used (in parallel!)
    use_profiles:
      - h2t1
      - h34t12
      - h24t2

  # specify traffic profiles for this scenario
  traffic_profiles:
    #  the default profile
    - name: h2t1
      # estimated runtime in seconds of this schedule in seconds
      runtime: 1
      # grace time in seconds before performing a traffic analysis
      wait_for_analaysis: 3
      # automatically create the schedule with the parameters specified
      type: auto
      # evaluation schema: strict, progressive or disregard
      evaluation: strict
      # specify the parameters for the schedule
      params: 
        # generate x events in total
        events: 8
        # randomly select time range for a event between [a,b]
        time_range: [1,1] 
        # randomly select the amount of packets from the given array
        choice_packets: [5000]
        # randomly select a inter arrival time from the given array
        choice_iat: ["1us"]
        # randomly select a priority from the given array
        choice_priority: [1]
    - name: h34t12
      # estimated runtime of this schedule in seconds
      runtime: 1
      # grace time in seconds before performing a traffic analysis
      wait_for_analaysis: 3
      # automatically create the schedule with the parameters specified
      type: auto
      # evaluation schema: strict, progressive or disregard
      evaluation: progressive
      # specify the parameters for the schedule
      params: 
        # generate x events in total
        events: 8
        # randomly select time range for a event between [a,b]
        time_range: [1,2] 
        # randomly select the amount of packets from the given array
        choice_packets: [10000]
        # randomly select a inter arrival time from the given array
        choice_iat: ["1us"]
        # randomly select a priority from the given array
        choice_priority: [1]
        # randomly choose a number of ip source addresses corresponding
        # to the selected hosts and keep them fixed during event
        # generation. Choose any of the destination addresses from the
        # range associated with hosts in dst_hosts
        ip_overrides:
          count: 5
          src_hosts: ["h1"]
          dst_hosts: ["h3"]
    - name: h24t2
      # estimated runtime of this schedule in seconds
      runtime: 1
      # grace time in seconds before performing a traffic analysis
      wait_for_analaysis: 3
      # automatically create the schedule with the parameters specified
      type: auto
      # evaluation schema: strict, progressive or disregard
      evaluation: progressive
      # specify the parameters for the schedule
      params: 
        # generate x events in total
        events: 8
        # randomly select time range for a event between [a,b]
        time_range: [5,5] 
        # randomly select the amount of packets from the given array
        choice_packets: [5000]
        # randomly select a inter arrival time from the given array
        choice_iat: ["1us"]
        # randomly select a priority from the given array
        choice_priority: [1]
        # randomly choose a number of ip source addresses corresponding
        # to the selected hosts and keep them fixed during event
        # generation. Choose any of the destination addresses from the
        # range associated with hosts in dst_hosts
        ip_overrides:
          count: 5
          src_hosts: ["h1"]
          dst_hosts: ["h2"]

  # more advanced traffic generation parameters
  trafgen:

    # Specifies the (random) ips that are used in the traffic generator.
    # This is required for setting up the network oracle in 
    # the controller. The file is stored in the working directory of the
    # scenario so this can be the same for all scenarios (no need to change).
    deployment_file: "oracle/deployment.yaml"
    
    # Artifical delay for udp streams. The first packet is
    # sent immediatly and all other packets are sent after a timeout
    # that can be specified with this variable.
    udp_first_packet_delay: 0.5
